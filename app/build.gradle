apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.appdistribution'

// region jacoco
jacoco {
    toolVersion = "$jacoco_version"
}

def jacocoDebugTree =
                fileTree(dir: "${buildDir}/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/adefruandta") +
                fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug/com/adefruandta")
def jacocoMainSrc = files(["${project.projectDir}/src/main/java"])
def jacocoExecutionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    reports {
        csv.enabled = true
        xml.enabled = true
        html.enabled = true
    }

    sourceDirectories.from = files([jacocoMainSrc])
    classDirectories.from = files([jacocoDebugTree])
    executionData.from = files([jacocoExecutionData])
}

if (project.hasProperty("release.properties") &&
        new File(project.property("release.properties")).exists()) {
    Properties releaseProperties = new Properties()
    releaseProperties.load(new FileInputStream(file(project.property("release.properties"))))

    android {
        signingConfigs {
            release {
                storeFile file(releaseProperties['keystore'])
                storePassword releaseProperties['keystore.password']
                keyAlias releaseProperties['keystore.key.alias']
                keyPassword releaseProperties['keystore.key.password']
            }
        }

        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
        }
    }
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.adefruandta.devquotes"
        minSdkVersion 17
        targetSdkVersion 29
        versionCode 1
        versionName "1.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        firebaseAppDistribution {
            serviceCredentialsFile = "app/developer-quotes-33afb-78085186f488.json"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    testImplementation "io.mockk:mockk:1.10.0"

    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    // Retrofit
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.6.1'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.6.1'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.1'
    implementation 'com.squareup.okhttp3:okhttp:4.2.1'
    implementation 'com.google.code.gson:gson:2.8.6'

    // Room
    implementation "androidx.room:room-runtime:2.2.5"
    implementation "androidx.room:room-rxjava2:2.2.5"
    kapt "androidx.room:room-compiler:2.2.5"

    // HappyFresh Github
    implementation 'com.github.happyfresh:catapult:1.8.1'
    implementation "com.github.happyfresh.HappySupportAndroid:happytracker:1.5.1"

    // Firebase
    implementation 'com.google.firebase:firebase-analytics:17.4.3'
}

coveralls {
    jacocoReportPath 'build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml'
}